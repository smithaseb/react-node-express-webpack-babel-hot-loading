{"name":"React-node-express-webpack-babel-hot-loading","tagline":"Base framework to develop a web application using react, node, express, webpack babel with hot module loading","body":"# react-node-express-webpack-babel-hot-loading\r\nBase framework/configuration to develop a web application using react, node, express, webpack babel with hot module \r\n\r\nPrerequisite : Install Nodejs\r\n\r\nSteps to setup the configuration: \r\n\r\ncd to your folder where you want your project to live and run:\r\n\r\n    npm init –y \r\n\r\nThis will nitiate your node project and create the package.json file.\r\n\r\nInstall express \r\n\r\n    npm install express --save\r\n    \r\nCreate server.js file and add the following to setup the server\r\n\r\n    var express = require('express');\r\n    var path = require('path');\r\n    var app = express();\r\n    var port = 8080;\r\n    app.get('*', function(req,res){\r\n       res.sendFile(path.join(__dirname,'app','index.html'));\r\n    });\r\n    app.listen(port,function(){\r\n        console.log('Listening to port' + port);\r\n    });\r\n\r\nAdd app/index.html\r\n\r\nRun the express server \r\n\r\n    node server.js\r\nand see whether the index.html is displayed by hitting \r\n\r\n    localhost:8080/\r\n\r\nInstall webpack\r\n\r\n    npm install --save-dev webpack webpack-dev-middleware webpack-hot-middleware\r\n\r\nWebpack – bundler utility\r\n(explain webapck)\r\n\r\nThis way, you don't have to worrying about proxy logic and you can easily integrate hot reloading into your existing express server without the need for webpack-dev-server\r\nconfigure weback\r\n\r\nAdd webpack.config.js\r\n\r\n    var webpack = require('webpack');\r\n    var path = require('path');\r\n    module.exports = {\r\n    entry: [\r\n        'webpack-hot-middleware/client', // This connects to the server to receive notifications when the bundle rebuilds and then updates your client bundle accordingly\r\n    './app/index.js' // entry point\r\n    ],\r\n    output: {\r\n        path: __dirname,\r\n        publicPath: '/assets/', // destination directory\r\n        filename:'bundle.js'   // output file name\r\n    },\r\n    devtool: '#source-map',\r\n    plugins: [\r\n        new webpack.optimize.OccurenceOrderPlugin(),\r\n        new webpack.HotModuleReplacementPlugin(),\r\n        new webpack.NoErrorsPlugin()\r\n    ],\r\n    }\r\n\r\nTo make Webpack work with a Node backend, update server.js with the following: \r\n\r\n    var webpack = require('webpack');\r\n    var webpackConfig = require('./webpack.config');\r\n    var compiler = webpack(webpackConfig);\r\n    app.use(require(\"webpack-dev-middleware\")(compiler,{\r\n        noInfo: true,\r\n        publicPath: webpackConfig.output.publicPath\r\n    }));\r\n\r\nLive-Reload with Webpack\r\n\r\nWith live reload, when you save a file, it automatically refreshes your browser. No need to press F5 anymore. Looks like a lazy developer tip, but it really increases your productivity, especially with dual-screen\r\n\r\nAdd below line to server.js\r\n\r\n    app.use(require(\"webpack-hot-middleware\")(compiler));\r\n\r\nAdd app/index.js\r\n\r\n    console.log('hello world!!!!!!!');\r\n    \r\nRun the application again and see the hot module reloading setup is complete\r\n\r\nSee this in the browser console\r\n\r\n    hello world!!!!!!!\r\n    [HMR] connected\r\n    \r\n    \r\nInstall babel (for version 6) components ( for ES6 /JSX converting)\r\nuse Babel to transpile \r\n\r\n    npm install --save-dev babel-core babel-loader babel-plugin-react-transform babel-preset-es2015 babel-preset-react\r\n\r\nAdd .babelrc file\r\n\r\n      \"presets\": [\"react\", \"es2015\"],\r\n      \"env\": {\r\n        \"development\": {\r\n          \"plugins\": [\r\n            [\"react-transform\", {\r\n              \"transforms\": [{\r\n                \"transform\": \"react-transform-hmr\",\r\n                \"imports\": [\"react\"],\r\n                \"locals\": [\"module\"]\r\n              }, {\r\n                \"transform\": \"react-transform-catch-errors\",\r\n                \"imports\": [\"react\", \"redbox-react\"]\r\n              }]\r\n            }]\r\n          ]\r\n        }\r\n      }\r\n    }\r\n\r\nUpdate webpack.config.js to load babel loader \r\n\r\n    module: {\r\n        loaders: [\r\n            {\r\n                test: /\\.js$/,\r\n                exclude: /node_modules/,\r\n                loader: 'babel',\r\n            }\r\n        ],\r\n    },\r\n\r\nInstall React now\r\n\r\n    npm install --save react react-dom\r\n\r\nInstall react hot loader\r\n\r\n    npm install --save-dev react-transform-hmr react-transform-catch-errors redbox-react\r\n\r\n\r\nAdd your first react code  to index.js \r\n\r\n    import React from 'react';\r\n    import ReactDOM from 'react-dom';\r\n    class Hello extends React.Component {\r\n        render() {\r\n            return <h1>Hello World!!!!!!!!!!!!!!!!!!! </h1>\r\n        }\r\n    }\r\n    ReactDOM.render(<Hello/>, document.getElementById('app'));\r\n\r\n\r\nMake changes to your react component and see the magic happening on the browser..\r\n\r\nHappy coding in react……….\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}